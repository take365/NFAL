import argparse

from .edinet.fetch import fetch_command
from .qual.report import report_command as qual_report_command
from .external.collect import collect_command as external_collect_command
from .quant.report import report_command as quant_report_command

DEFAULT_PROG = "nfal"


def build_parser(prog: str = DEFAULT_PROG) -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(prog=prog, description="NFAL command line tools")
    subparsers = parser.add_subparsers(dest="command", required=True)

    edinet_parser = subparsers.add_parser("edinet", help="EDINET related utilities")
    edinet_subparsers = edinet_parser.add_subparsers(dest="edinet_command", required=True)

    fetch_parser = edinet_subparsers.add_parser("fetch", help="Fetch securities reports")
    fetch_parser.add_argument("--edinet", required=True, help="EDINET code (e.g. E05907)")
    fetch_parser.add_argument("--from", dest="from_date", help="Start date (YYYY-MM-DD)")
    fetch_parser.add_argument("--to", dest="to_date", help="End date (YYYY-MM-DD)")
    fetch_parser.add_argument(
        "--prefer",
        choices=["consolidated", "separate"],
        default="consolidated",
        help="Preferred filing type when both consolidated and separate exist",
    )
    fetch_parser.add_argument(
        "--outdir",
        default="output",
        help="Base directory to store fetched data",
    )
    fetch_parser.add_argument(
        "--cache-dir",
        help="Directory to store cached EDINET listings (default: <outdir>/.cache/edinet)",
    )
    fetch_parser.add_argument(
        "--no-cache",
        action="store_true",
        help="Do not read or write cached EDINET listings",
    )
    fetch_parser.add_argument(
        "--clear-cache",
        action="store_true",
        help="Clear cached listings before fetching new data",
    )
    fetch_parser.add_argument(
        "--cache-ttl",
        type=int,
        metavar="DAYS",
        help="Refresh cached listings older than the specified number of days",
    )
    fetch_parser.set_defaults(func=fetch_command)

    quant_parser = subparsers.add_parser("quant", help="Quantitative analysis utilities")
    quant_subparsers = quant_parser.add_subparsers(dest="quant_command", required=True)

    report_parser = quant_subparsers.add_parser("report", help="Generate quantitative CSV and Markdown report")
    report_parser.add_argument(
        "--document",
        required=True,
        help="Path to a fetched filing directory (e.g. output/E00000/20240101_SXXXXX)",
    )
    report_parser.add_argument(
        "--output",
        help="Directory to store generated outputs (default: <document>/quant)",
    )
    report_parser.add_argument(
        "--prefer",
        choices=["consolidated", "separate"],
        default="consolidated",
        help="Preferred context when both consolidated and non-consolidated facts exist",
    )
    report_parser.set_defaults(func=quant_report_command)

    qual_parser = subparsers.add_parser("qual", help="Qualitative analysis utilities")
    qual_subparsers = qual_parser.add_subparsers(dest="qual_command", required=True)

    qual_report_parser = qual_subparsers.add_parser("report", help="Generate qualitative checklist report")
    qual_report_parser.add_argument(
        "--json",
        required=True,
        help="Path to yuho_latest.json / yuho_previous.json generated by fetch",
    )
    qual_report_parser.add_argument(
        "--output",
        help="Directory to store generated report (default: JSON file directory)",
    )
    qual_report_parser.add_argument(
        "--title",
        help="Optional document title to show in the report header",
    )
    qual_report_parser.add_argument(
        "--mode",
        choices=["full", "quick4"],
        default="full",
        help="Report mode: 'full' (all sections) or 'quick4' (Lean-4 + summary)",
    )
    qual_report_parser.set_defaults(func=qual_report_command)

    external_parser = subparsers.add_parser("external", help="External information utilities")
    external_subparsers = external_parser.add_subparsers(dest="external_command", required=True)

    collect_parser = external_subparsers.add_parser("collect", help="Collect external information sources")
    collect_parser.add_argument(
        "--json",
        required=True,
        help="Path to yuho_latest.json generated by fetch",
    )
    collect_parser.add_argument(
        "--output",
        help="Directory to store sources.md (default: output/<EDINET>/external)",
    )
    collect_parser.add_argument(
        "--max-per-query",
        type=int,
        default=5,
        help="Max results to record per query (default: 5)",
    )
    collect_parser.set_defaults(func=external_collect_command)

    return parser


def main(argv=None) -> int:
    parser = build_parser()
    args = parser.parse_args(argv)
    if hasattr(args, "func"):
        return args.func(args)
    parser.print_help()
    return 1
